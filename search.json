[{"path":"https://shffer.github.io/longpoly/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 longpoly authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://shffer.github.io/longpoly/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shane Fernandez. Author, maintainer.","code":""},{"path":"https://shffer.github.io/longpoly/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fernandez S (2025). longpoly: Fit Polynomial Models Longitudinal Data. R package version 0.0.1.0, https://shffer.github.io/longpoly/.","code":"@Manual{,   title = {longpoly: Fit Polynomial Models Over Longitudinal Data},   author = {Shane Fernandez},   year = {2025},   note = {R package version 0.0.1.0},   url = {https://shffer.github.io/longpoly/}, }"},{"path":"https://shffer.github.io/longpoly/index.html","id":"longpoly-","dir":"","previous_headings":"","what":"Fit Polynomial Models Over Longitudinal Data","title":"Fit Polynomial Models Over Longitudinal Data","text":"Longpoly provides suite tools analyse longitudinal data. intended applied instances expected rates change may vary across performance levels. motivating use case longpoly investigate average rates cognitive decline depend level impairment, utility extends longitudinal data outcomes similar relationships may observed. approach provides novel “performance-adjusted” measure rates change. Either mean performance baseline performance can used adjustment. Linear slopes fit individual’s longitudinal observations, performance metric calculated (.e., mean baseline). Next, polynomial fit group level predict rates change function chosen performance metric. polynomial allows relationship non-linear, longpoly provides tools select polynomial order. Finally, residuals model extracted measure extent individual’s rate change faster slower typical level performance. case cognitive decline, approach also offers data-driven method identify floor effects. Floor effects occur cognitive assessments lack sensitivity provide accurate measurements performance lower ranges. longitudinal data, means cognitive decline range also reliably quantified. fitting polynomial model, longpoly can solve local minimum lower range mean/baseline performance identify point impaired performance becomes associated slowed decline. interpreted reflect range performance floor effects occur, may alternatively reflect true plateau decline occurs advanced impairment. However, identifying effect also interest difficult analyse rates decline participants plateau alongside elsewhere spectrum performance due fundamental differences. Longpoly can used filter individuals performance range floor effects identifies.","code":""},{"path":"https://shffer.github.io/longpoly/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fit Polynomial Models Over Longitudinal Data","text":"Longpoly can installed GitHub follows.","code":"# install.packages(\"devtools\") devtools::install_github(\"shffer/longpoly\")"},{"path":"https://shffer.github.io/longpoly/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Fit Polynomial Models Over Longitudinal Data","text":"Note, example workflow uses mean performance performance metric. default longpoly functions. baseline preferred, add performance_metric = \"baseline\" function calls.","code":""},{"path":"https://shffer.github.io/longpoly/index.html","id":"id_1-get-slopes-and-performance","dir":"","previous_headings":"Example","what":"1. Get Slopes and Performance","title":"Fit Polynomial Models Over Longitudinal Data","text":"first step workflow submit longitudinal data set get_slopes_and_performance(). function returns tibble columns “id”, “performance_slope”, one either “performance_mean” “performance_baseline” depending user selection (specificing performance_metric = \"mean\" \"baseline\"). purposes example, create dummy dataset five participants, three timepoints. can now used get_slopes_and_performance(). Load longpoly Apply function (specifying column names)","code":"n_participants = 5 n_timepoints = 3  set.seed(2222)  dummy <- data.frame(   id = rep(1:n_participants, each = n_timepoints),   timepoint = rep(1:n_timepoints, times = n_participants),   performance = rnorm(n_participants * n_timepoints, mean = 0, sd = 1) )  dummy |> head(n = 6) #>   id timepoint performance #> 1  1         1  -0.3380621 #> 2  1         2   0.9391643 #> 3  1         3   1.7377190 #> 4  2         1   0.6963261 #> 5  2         2   0.4622959 #> 6  2         3  -0.3150868 library(longpoly) sm <- get_slopes_and_performance(   data = dummy,   id_col = \"id\",   time_col = \"timepoint\",   outcome_col = \"performance\" )  sm #> # A tibble: 5 × 3 #>      id performance_slope performance_mean #>   <int>             <dbl>            <dbl> #> 1     1             1.04             0.780 #> 2     2            -0.506            0.281 #> 3     3             0.892            1.10  #> 4     4            -1.06             0.827 #> 5     5             1.07            -0.853"},{"path":"https://shffer.github.io/longpoly/index.html","id":"a-note-about-simulated-data","dir":"","previous_headings":"Example > 1. Get Slopes and Performance","what":"A Note About Simulated Data","title":"Fit Polynomial Models Over Longitudinal Data","text":"dummy data used get_slopes_and_performance() simulate relationship mean slope values therefore limited use illustrating utility functions longpoly. Rather using output, remainder example workflow makes use longpoly_example_data example cognitive data set shipped longpoly. creating data, 1000 mean values (X‾\\bar{X}) initially sampled N(0,1)N(0, 1) (cognitively unimpaired participants) another 1000 mean values sampled N(−1.5,0.75)N(-1.5, 0.75) (participants cognitive impairment). data combined slopes (YY) assigned conditionally follows: Y∼N(−0.10,0.2)Y \\sim N(-0.10, 0.2)    −0.5≤X‾-0.5 \\le \\bar{X} Y∼N(−0.30,0.2)Y \\sim N(-0.30, 0.2)    −1.0≤X‾<−0.5-1.0 \\le \\bar{X} < -0.5 Y∼N(−0.45,0.2)Y \\sim N(-0.45, 0.2)    −1.5≤X‾<−1-1.5 \\le \\bar{X} < -1 Y∼N(−0.25,0.2)Y \\sim N(-0.25, 0.2)    −2.0≤X‾<−1.5-2.0 \\le \\bar{X} < -1.5 Y∼N(−0.15,0.2)Y \\sim N(-0.15, 0.2)    X‾<−2\\bar{X} < -2 Given , non-linear relationship expected minimal decline observed mean performance -0.5. lower mean performance, faster decline expected mean performance reaches -1.5 point decline slows . Floor effects therefore simulated occur X‾=−1.5\\bar{X} = -1.5.","code":"example_data <- longpoly::longpoly_example_data  example_data |> head(n = 10) #> # A tibble: 10 × 3 #>       id performance_mean performance_slope #>    <int>            <dbl>             <dbl> #>  1     1            0.235           0.127   #>  2     2           -0.331           0.0715  #>  3     3           -0.312          -0.215   #>  4     4           -2.30            0.126   #>  5     5           -0.171          -0.215   #>  6     6            0.140          -0.219   #>  7     7           -1.50           -0.735   #>  8     8           -1.01           -0.444   #>  9     9           -0.948          -0.372   #> 10    10           -0.494           0.00156"},{"path":"https://shffer.github.io/longpoly/index.html","id":"id_2-test-polynomials","dir":"","previous_headings":"Example","what":"2. Test Polynomials","title":"Fit Polynomial Models Over Longitudinal Data","text":"tibble output get_slopes_and_performance() (example data) can used testing models describe relationship slope mean values using test_polynomial(). function assigns participants train test data sets fits polynomials maximum order specified user. returns list containing: polynomial_results - tibble columns recording order polynomial tested corresponding proportion variance explained (PVE) test train data, well additional PVE test data* every increase polynomial order train_ids - character vector ids allocated train data set model development test_ids - character vector ids allocated test data set model development scree_plot - visualisation additional PVE test data* higher order polynomial models.  *PVE test data calculated follows: SSresidual=∑(xi−x̂)2SS_{\\text{residual}} = \\sum (x_i - \\hat{x}_i)^2 SSregression=∑(x̂−x‾)2SS_{\\text{regression}} = \\sum (\\hat{x}_i - \\bar{x})^2 SStotal=SSregression+SSresidualSS_{\\text{total}} = SS_{\\text{regression}} + SS_{\\text{residual}} PVEtest=SSregressionSStotal PVE_{\\text{test}} = \\frac{SS_{\\text{regression}}}{SS_{\\text{total}}} : xix_i= Calculated slope ithi^{\\text{th}}individual test set x̂\\hat{x}_i= Predicted slope ithi^{\\text{th}}individual test set x‾\\bar{x}= Average slopes computed test set   outputs suggest additional PVE plateaus models 4th order higher indicating 3rd order polynomial appropriate example data set.","code":"set.seed(1111) test_results <- test_polynomial(data = example_data, test_proportion = 1/3, max_order = 6)  test_results$polynomial_results #> # A tibble: 6 × 4 #>   order pve_in_train_data pve_in_test_data additional_pve #>   <int>             <dbl>            <dbl>          <dbl> #> 1     1            0.0365           0.0381       0.0381   #> 2     2            0.0939           0.102        0.0639   #> 3     3            0.148            0.170        0.0682   #> 4     4            0.152            0.174        0.00417  #> 5     5            0.204            0.200        0.0254   #> 6     6            0.204            0.200        0.000795 plot(test_results$scree_plot)"},{"path":"https://shffer.github.io/longpoly/index.html","id":"id_2a-find-polynomial","dir":"","previous_headings":"Example","what":"2a Find Polynomial","title":"Fit Polynomial Models Over Longitudinal Data","text":"Visual assessment scree plot may always readily discern appropriate polynomial order data driven approach may preferred. find_polynomial()function offers alternative approach selecting model addresses . Specifically, max(PVEtest)\\max(PVE_{test}) across models extracted, parsimonious model PVE≥(max(PVEtest)−x)PVE \\ge (max(PVE_{test}) - x) (xx user defined threshold) selected. allows user determine trade-model fit (potential overfitting) model simplicity. function returns list containing: polynomial_results - tibble columns recording order polynomial tested corresponding proportion variance explained (PVE) test train data (columns identical returned test_polynomial() data seed used) selected_order - order selected model (based max(PVEtest)−xmax(PVE_{test}) - x criteria) selected_model_coefficients - coefficients selected model (based max(PVEtest)−xmax(PVE_{test}) - x criteria) train_ids - character vector ids allocated train data set model development test_ids - character vector ids allocated test data set model development  Setting x=0.05x = 0.05 example data returns following function selects third order polynomial given y=−0.164+0.129x−0.005x2−0.019x3y = -0.164 + 0.129x - 0.005x^2 - 0.019x^3. agrees test_polynomial(), note conservative value x selected higher order model. example x=0.02x = 0.02 select fifth order model since lower order models PVEtest≥0.18PVE_{test} \\ge 0.18.","code":"set.seed(1111) find_poly_results <- find_polynomial(data = example_data, test_proportion = 1/3, max_order = 6, x = 0.05)  find_poly_results[1:3] #> $polynomial_results #> # A tibble: 6 × 3 #>   order pve_in_train_data pve_in_test_data #>   <int>             <dbl>            <dbl> #> 1     1            0.0365           0.0381 #> 2     2            0.0939           0.102  #> 3     3            0.148            0.170  #> 4     4            0.152            0.174  #> 5     5            0.204            0.200  #> 6     6            0.204            0.200  #>  #> $selected_order #> [1] 3 #>  #> $selected_model_coefficients #>                            (Intercept) poly(performance_mean, 3, raw = TRUE)1  #>                           -0.164037069                            0.129172597  #> poly(performance_mean, 3, raw = TRUE)2 poly(performance_mean, 3, raw = TRUE)3  #>                           -0.004785321                           -0.018976382"},{"path":"https://shffer.github.io/longpoly/index.html","id":"id_3-implement-polynomial","dir":"","previous_headings":"Example","what":"3. Implement Polynomial","title":"Fit Polynomial Models Over Longitudinal Data","text":"selecting polynomial order (typically either reviewing scree plot output test_polynomial() using find_polynomial() select data-driven process described ), model implemented using implement_polynomial(). optional parameter, floor_effects(), determines whether individuals floor effects identified. set true, floor_range() argument must specified reflects range mean values minimum value slope found. function returns list following: model_formula — formula final model final_data — tibble columns “id”, “performance_slope”, “performance_mean”, “predicted_slope”, “residual”. floor_effects = TRUE, additional column “floor_effects” appended either “keep” “remove” reflecting whether record removed based identified performance_mean threshold floor effects threshold — floor_effects = TRUE, records threshold used floor effect classifications example data, Steps 2 2a () selected third order polynomial. Implementing model returns following Importantly, “residual” column added final_data tibble. performance-adjusted measure rate change intended output longpoly. Note also floor effects threshold identified -1.59. example data simulated show floor effects mean performance < -1.5 (±\\pma noise factor) reasonable approximation expected.","code":"poly_out <-    implement_polynomial(     data = example_data,     order = 3,     floor_effects = TRUE,     floor_range = c(min(example_data$performance_mean), 0)   )  poly_out$model_formula #> [1] \"y = -0.164 +0.129x -0.005x^2 -0.019x^3\"  # temporarily shorten names in final_data so example can be printed without spilling over poly_out$final_data %>% set_names(gsub(\"performance_\", \"\", colnames(poly_out$final_data))) %>% head #> # A tibble: 6 × 6 #>      id   mean   slope predicted_slope residual floor_effects #>   <int>  <dbl>   <dbl>           <dbl>    <dbl> <fct>         #> 1     1  0.235  0.127           -0.134   0.261  keep          #> 2     2 -0.331  0.0715          -0.207   0.278  keep          #> 3     3 -0.312 -0.215           -0.204  -0.0105 keep          #> 4     4 -2.30   0.126           -0.255   0.381  remove        #> 5     5 -0.171 -0.215           -0.186  -0.0289 keep          #> 6     6  0.140 -0.219           -0.146  -0.0725 keep  poly_out$threshold #> [1] -1.592723"},{"path":"https://shffer.github.io/longpoly/index.html","id":"id_4-plot-polynomial","dir":"","previous_headings":"Example","what":"4. Plot Polynomial","title":"Fit Polynomial Models Over Longitudinal Data","text":"plot_polyomial() can used produce plots polynomial given order train test data sets model development (using id vectors produced test_polynomial() find_polynomial define ), whole cohort, whole cohort keep/remove status based floor effects assigned (use threshold implement_polynomial() ). plots returned ggplot objects named list.","code":"plots <-   plot_polynomial(     data = poly_out$final_data,     order = 3,     whole_cohort_title = \"Selected Polynomial in Whole Cohort\",     whole_cohort_only = FALSE,     train_id = test_results$train_ids,     test_id = test_results$test_ids,     train_title = \"Selected Polynomial in Train Cohort\",     test_title = \"Selected Polynomial in Test Cohort\",     keep_remove = TRUE,     threshold = poly_out$threshold,     threshold_linetype = \"dashed\",     threshold_line_color = \"#5f6a7a\",     annotate_floor_thresh = TRUE,     legend_position = \"bottom\",   )  plots"},{"path":"https://shffer.github.io/longpoly/index.html","id":"id_5-data-filtering","dir":"","previous_headings":"Example","what":"5. Data Filtering","title":"Fit Polynomial Models Over Longitudinal Data","text":"Simulated data offers benefit knowing results look like. expected third order polynomial floor effect mean performance ≈−1.5\\approx -1.5, seen. However, final model also shows prominent downward slope right tail gives impression faster decline (negative slopes) expected mean values exceed value approximately 2. effect simulated exist – fact, slopes sampled N(−0.10,0.2)N(-0.10, 0.2) mean values ≥−0.5\\ge -0.5 meaning polynomial flat region reflect “true” effect. observation reflects (misleading) influence scarce data points extremes distribution mean performance can exert. Assessment whole cohort plot suggests , data mean performance > 2, random sampling led representation negative slopes. Review data range confirms . sampled enough observations range, summary statistics instead reflect distribution sampled. However, mean values come Cognitively Unimpaired participants (see ‘Note Simulated Data’ ) sampled N(0,1)N(0,1). score 2 therefore 2SD mean distribution explains data scarce range. function filter_slopes_and_mean() filters data extreme ranges mean values according user-defined criteria. window reflecting “width” extreme range defined minimum number observations range defined. actual number observations less specified minimum, data window removed. can performed left right tails (), data points removed either, polynomial fitting process (.e., Steps 2 4) repeated. Since values right tail example data simulated separate distribution ( N(0,1)N(0,1) ) left ( N(−1.5,0.75)N(-1.5, 0.75) ), perform filtering separately. right tail, set window size capture values 2 (.e., 2SD distribution mean), require least 25 (1000) observations range. now filter data set ranges left tail. , set window size capture mean values less - 3 (.e., 2SD distribution mean) require least 25 observations. brevity, skip test_polynomial find_polynomial steps instead implement third order polynomial filter floor effects (practice, chosen development steps skipped).  Based minimum count 25 observations, maximum range mean scores filtered (n = 22 X‾\\bar{X} > 2) minimum range (n = 37 X‾\\bar{X} < -3). identified threshold (now -1.6) change meaningfully previous value (.e., -1.59), downward trend right tail now less prominent. residuals model can now extracted participants floor effects threshold:","code":"example_data %>% filter(performance_mean > 2) %>% select(performance_slope) %>% summary #>  performance_slope #>  Min.   :-0.4833   #>  1st Qu.:-0.2842   #>  Median :-0.1766   #>  Mean   :-0.1760   #>  3rd Qu.:-0.1244   #>  Max.   : 0.2519 filtered_example_data <- filter_slopes_and_mean(   data = example_data,   window_size = max(example_data$performance_mean) - 2,   min_obs = 25,   max_filter = TRUE,   min_filter = FALSE ) #> [1] \"number of observations in max window:  22\" #> [1] \"user defined miniumum number of observations:  25\" #> [1] \"data in max window removed\" filtered_example_data <- filter_slopes_and_mean(   data = filtered_example_data,   window_size = -3 - min(filtered_example_data$performance_mean),   min_obs = 25,   max_filter = FALSE,   min_filter = TRUE ) #> [1] \"number of observations in min window:  37\" #> [1] \"user defined miniumum number of observations:  25\" #> [1] \"data in min window not removed\" poly_out_filtered <-    implement_polynomial(     data = filtered_example_data,     order = 3,     floor_effects = TRUE,     floor_range = c(min(filtered_example_data$performance_mean), 0)   )  plots_filtered <-   plot_polynomial(     data = poly_out_filtered$final_data,     order = 3,     whole_cohort_title = \"Selected Polynomial in Whole Cohort\",     whole_cohort_only = TRUE,     keep_remove = TRUE,     threshold = poly_out_filtered$threshold,     threshold_linetype = \"dashed\",     threshold_line_color = \"#5f6a7a\",     annotate_floor_thresh = TRUE,     legend_position = \"bottom\",   )  plots_filtered$keep_remove poly_out_filtered$final_data %>%    filter(floor_effects == \"keep\") %>%    select(id, residual) %>%    head(n = 10) #> # A tibble: 10 × 2 #>       id residual #>    <int>    <dbl> #>  1     1   0.258  #>  2     2   0.276  #>  3     3  -0.0132 #>  4     5  -0.0319 #>  5     6  -0.0760 #>  6     7  -0.428  #>  7     8  -0.164  #>  8     9  -0.0977 #>  9    10   0.226  #> 10    11   0.129"},{"path":"https://shffer.github.io/longpoly/reference/filter_slopes_and_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter slope and mean data to remove scarce data ranges before fitting polynomial — filter_slopes_and_mean","title":"Filter slope and mean data to remove scarce data ranges before fitting polynomial — filter_slopes_and_mean","text":"Filter slope mean data remove scarce data ranges fitting polynomial","code":""},{"path":"https://shffer.github.io/longpoly/reference/filter_slopes_and_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter slope and mean data to remove scarce data ranges before fitting polynomial — filter_slopes_and_mean","text":"","code":"filter_slopes_and_mean(   data,   performance_metric = \"mean\",   window_size,   min_obs,   max_filter = TRUE,   min_filter = TRUE )"},{"path":"https://shffer.github.io/longpoly/reference/filter_slopes_and_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter slope and mean data to remove scarce data ranges before fitting polynomial — filter_slopes_and_mean","text":"data output longpoly::get_slopes_and_mean() (tibble columns \"id\", \"performance_slope\", & \"performance_mean\" \"performance_bl\") performance_metric measure performance used? Must either \"mean\" (case performance_mean column must data) \"baseline\" (data must contain performance_bl). Default = \"mean\" window_size difference added /subtracted minuimum/maximum values subset data. number observations subset counted min_obs minimum number observations required subset defined window_size. fewer observations exist, data ranges filtered max_filter filter highest scores? default = TRUE min_filter filter lowest scores? default = TRUE","code":""},{"path":"https://shffer.github.io/longpoly/reference/filter_slopes_and_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter slope and mean data to remove scarce data ranges before fitting polynomial — filter_slopes_and_mean","text":"dataset containing slope mean values sparse data removed (requested identified)","code":""},{"path":"https://shffer.github.io/longpoly/reference/filter_slopes_and_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter slope and mean data to remove scarce data ranges before fitting polynomial — filter_slopes_and_mean","text":"","code":"longpoly_example_data %>% nrow #> [1] 2000  filtered_example_data <- filter_slopes_and_mean( data = longpoly_example_data, performance_metric = \"mean\", window_size = 0.25, min_obs = 20, max_filter = TRUE, min_filter = TRUE ) #> [1] \"number of observations in max window:  4\" #> [1] \"user defined miniumum number of observations:  20\" #> [1] \"data in max window removed\" #> [1] \"number of observations in min window:  4\" #> [1] \"user defined miniumum number of observations:  20\" #> [1] \"data in min window removed\"  filtered_example_data %>% nrow #> [1] 1992"},{"path":"https://shffer.github.io/longpoly/reference/find_polynomial.html","id":null,"dir":"Reference","previous_headings":"","what":"A data-driven approach to choosing order of polynomial model describing the relationship between linear rate of change and mean score in longitudinal data — find_polynomial","title":"A data-driven approach to choosing order of polynomial model describing the relationship between linear rate of change and mean score in longitudinal data — find_polynomial","text":"data-driven approach choosing order polynomial model describing relationship linear rate change mean score longitudinal data","code":""},{"path":"https://shffer.github.io/longpoly/reference/find_polynomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A data-driven approach to choosing order of polynomial model describing the relationship between linear rate of change and mean score in longitudinal data — find_polynomial","text":"","code":"find_polynomial(   data,   performance_metric = \"mean\",   test_proportion = 1/3,   idcol = \"id\",   max_order = 6,   x )"},{"path":"https://shffer.github.io/longpoly/reference/find_polynomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A data-driven approach to choosing order of polynomial model describing the relationship between linear rate of change and mean score in longitudinal data — find_polynomial","text":"data output longpoly::get_slopes_and_mean() (tibble columns \"id\", \"performance_slope\", & \"performance_mean\" \"performance_bl\") performance_metric measure performance used? Must either \"mean\" (case performance_mean column must data) \"baseline\" (data must contain performance_bl). Default = \"mean\" test_proportion proportion participants allocate test set. default = 1/3 idcol column name corresponding ID variable data. Default = \"id\" max_order maximum order polynomial models tested. Polynomial models 1:max_order tested. default = 6 x Polynomials selected finding maximum proportion variance explained (PVE) test data across models, finding parsimonious model PVE least max(PVE) - x","code":""},{"path":"https://shffer.github.io/longpoly/reference/find_polynomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A data-driven approach to choosing order of polynomial model describing the relationship between linear rate of change and mean score in longitudinal data — find_polynomial","text":"list containing: 'polynomial_results' - tibble columns order model tested corresponding pve train test data 'selected_order' - order selected model (based max(PVE) - x criteria) 'selected_model_coefficients' - coefficients selected model (based max(PVE) - x criteria) 'train_ids' — character vector ids allocated train dataset model development 'test_ids' — character vector ids allocated test dataset model development","code":""},{"path":"https://shffer.github.io/longpoly/reference/find_polynomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A data-driven approach to choosing order of polynomial model describing the relationship between linear rate of change and mean score in longitudinal data — find_polynomial","text":"","code":"find_poly_results <- find_polynomial(data = longpoly_example_data,                                      performance_metric = \"mean\",                                      idcol = \"id\",                                      test_proportion = 1/3,                                      max_order = 6,                                      x = 0.05)  # View proportion of variance explained in the train and test data for each polynomial tested find_poly_results$polynomial_results #> # A tibble: 6 × 3 #>   order pve_in_train_data pve_in_test_data #>   <int>             <dbl>            <dbl> #> 1     1            0.0554           0.0591 #> 2     2            0.0762           0.0674 #> 3     3            0.158            0.228  #> 4     4            0.159            0.238  #> 5     5            0.194            0.210  #> 6     6            0.203            0.327   # View the order of the selected model find_poly_results$selected_order #> [1] 6  # View the coefficients of the selected model find_poly_results$selected_model_coefficients #>                            (Intercept) poly(performance_mean, 6, raw = TRUE)1  #>                          -1.310842e-01                           1.929380e-01  #> poly(performance_mean, 6, raw = TRUE)2 poly(performance_mean, 6, raw = TRUE)3  #>                          -6.407160e-02                          -6.530676e-02  #> poly(performance_mean, 6, raw = TRUE)4 poly(performance_mean, 6, raw = TRUE)5  #>                           1.016220e-02                           5.302042e-03  #> poly(performance_mean, 6, raw = TRUE)6  #>                          -5.921981e-05   # The IDs of the participants allocated to the train and test sets are stored in the following vectors find_poly_results$train_ids |> head() #> [1] 1197 1431  460   63  485 1894 find_poly_results$test_ids |> head() #> [1]  1  2  3  9 10 11"},{"path":"https://shffer.github.io/longpoly/reference/get_slopes_and_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Get individual linear slope and performance level (mean or baseline) from longitudinal data — get_slopes_and_performance","title":"Get individual linear slope and performance level (mean or baseline) from longitudinal data — get_slopes_and_performance","text":"Get individual linear slope performance level (mean baseline) longitudinal data","code":""},{"path":"https://shffer.github.io/longpoly/reference/get_slopes_and_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get individual linear slope and performance level (mean or baseline) from longitudinal data — get_slopes_and_performance","text":"","code":"get_slopes_and_performance(   data,   id_col = \"id\",   outcome_col = \"outcome\",   time_col = \"time\",   performance_metric = \"mean\" )"},{"path":"https://shffer.github.io/longpoly/reference/get_slopes_and_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get individual linear slope and performance level (mean or baseline) from longitudinal data — get_slopes_and_performance","text":"data longitudinal data set id_col column name corresponding ID variable data. Default = \"id\" outcome_col column name corresponding outcome variable data. Default = \"outcome\" time_col column name corresponding time variable data. Default = \"time\" performance_metric measure performance used? Must either \"mean\" \"baseline\". Default = \"mean\"","code":""},{"path":"https://shffer.github.io/longpoly/reference/get_slopes_and_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get individual linear slope and performance level (mean or baseline) from longitudinal data — get_slopes_and_performance","text":"tibble columns id, performance_slope, one either performance_mean performance_bl depending selection. used inputs subsequent test_polynomial() implement_polynomial() function calls (can therefore directly piped without storing intermediate output)","code":""},{"path":"https://shffer.github.io/longpoly/reference/get_slopes_and_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get individual linear slope and performance level (mean or baseline) from longitudinal data — get_slopes_and_performance","text":"","code":"# Create dummy data n_participants = 5 n_timepoints = 3  set.seed(2222)  dummy <- data.frame(   id = rep(1:n_participants, each = n_timepoints),   timepoint = rep(1:n_timepoints, times = n_participants),   performance = rnorm(n_participants * n_timepoints, mean = 0, sd = 1) )  # Extract slopes and mean from dummy data get_slopes_and_performance( data = dummy, id_col = \"id\", time_col = \"timepoint\", outcome_col = \"performance\", performance_metric = \"mean\" ) #> # A tibble: 5 × 3 #>      id performance_slope performance_mean #>   <int>             <dbl>            <dbl> #> 1     1             1.04             0.780 #> 2     2            -0.506            0.281 #> 3     3             0.892            1.10  #> 4     4            -1.06             0.827 #> 5     5             1.07            -0.853"},{"path":"https://shffer.github.io/longpoly/reference/implement_polynomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a polynomial of a specified order to describe the relationship between linear rate of change and mean score in longitudinal data — implement_polynomial","title":"Fit a polynomial of a specified order to describe the relationship between linear rate of change and mean score in longitudinal data — implement_polynomial","text":"Fit polynomial specified order describe relationship linear rate change mean score longitudinal data","code":""},{"path":"https://shffer.github.io/longpoly/reference/implement_polynomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a polynomial of a specified order to describe the relationship between linear rate of change and mean score in longitudinal data — implement_polynomial","text":"","code":"implement_polynomial(   data,   performance_metric = \"mean\",   order = 3,   floor_effects = FALSE,   floor_range = NULL )"},{"path":"https://shffer.github.io/longpoly/reference/implement_polynomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a polynomial of a specified order to describe the relationship between linear rate of change and mean score in longitudinal data — implement_polynomial","text":"data output longpoly::get_slopes_and_mean() (tibble columns \"id\", \"performance_slope\", & \"performance_mean\" \"performance_bl\") performance_metric measure performance used? Must either \"mean\" (case performance_mean column must data) \"baseline\" (data must contain performance_bl). Default = \"mean\" order order polynomial model (recommended selected scree plot output longpoly::test_polynomial()). default = 3 floor_effects test floor effects? identified finding mean value performance variable associated fastest rate decline impaired range (specified floor_range()). default = FALSE floor_range (required floor_effects = TRUE). 'impaired' range search value \"performance_mean\" returns minimum value \"performance_slope\". expects vector length two first value providing lower bound range second value upper.","code":""},{"path":"https://shffer.github.io/longpoly/reference/implement_polynomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a polynomial of a specified order to describe the relationship between linear rate of change and mean score in longitudinal data — implement_polynomial","text":"list containing: model_formula — formula final model final_data — tibble columns \"id\", \"performance_slope\", either \"performance_mean\" \"performance_bl\" (depending performance_metric), \"predicted_slope\", \"residual.\" floor_effects = TRUE, additional column \"floor_effects\" appended either keep/remove reflecting whether record removed based identified performance_mean threshold floor effects threshold — floor_effects = TRUE, records threshold used floor effect classifications","code":""},{"path":"https://shffer.github.io/longpoly/reference/implement_polynomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a polynomial of a specified order to describe the relationship between linear rate of change and mean score in longitudinal data — implement_polynomial","text":"","code":"poly_out <- implement_polynomial(   data = longpoly_example_data,   performance_metric = \"mean\",   order = 3,   floor_effects = TRUE,   floor_range = c(min(longpoly_example_data$performance_mean), 0) )  # View the equation of the final model poly_out$model_formula #> [1] \"y = -0.164 +0.129x -0.005x^2 -0.019x^3\"  # View the final data poly_out$final_data |> head() #> # A tibble: 6 × 6 #>      id performance_mean performance_slope predicted_slope residual #>   <int>            <dbl>             <dbl>           <dbl>    <dbl> #> 1     1            0.235            0.127           -0.134   0.261  #> 2     2           -0.331            0.0715          -0.207   0.278  #> 3     3           -0.312           -0.215           -0.204  -0.0105 #> 4     4           -2.30             0.126           -0.255   0.381  #> 5     5           -0.171           -0.215           -0.186  -0.0289 #> 6     6            0.140           -0.219           -0.146  -0.0725 #> # ℹ 1 more variable: floor_effects <fct>  # View the selected threshold  poly_out$threshold #> [1] -1.592723  # Other example uses:  # implement_polynomial(example_slope_mean_data, #                      floor_effects = FALSE) # # # if floor_effects = TRUE, # it may be sensible to use the minumum performance_mean value as the lower bound of the range, # e.g.: # example_slope_mean_data <- #   longpoly::get_slopes_and_mean( #     example_data, #     id_col = \"id\", #     outcome_col = \"memory_test\", #     time_col = \"time\" #   )) # # # implement_polynomial( #   example_slope_mean_data, #   floor_effects = TRUE, #   floor_range = c(min( #     example_slope_mean_data$performance_mean #   ), 0) # ) # # # # if floor_effects = FALSE, # it is straightforward to pipe in the output from longpoly::get_slopes_and_mean(), # e.g.: # get_slopes_and_mean(example_data, #                    id_col = \"id\", #                    outcome_col = \"memory_test\", #                    time_col = \"time\") %>% #   implement_polynomial(., floor_effects = FALSE)"},{"path":"https://shffer.github.io/longpoly/reference/longpoly_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Longpoly Example Data — longpoly_example_data","title":"Longpoly Example Data — longpoly_example_data","text":"Simulated Data Used Longpoly Examples","code":""},{"path":"https://shffer.github.io/longpoly/reference/longpoly_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Longpoly Example Data — longpoly_example_data","text":"","code":"longpoly_example_data"},{"path":[]},{"path":"https://shffer.github.io/longpoly/reference/longpoly_example_data.html","id":"longpoly-example-data","dir":"Reference","previous_headings":"","what":"longpoly_example_data","title":"Longpoly Example Data — longpoly_example_data","text":"data frame 2,000 rows 3 columns: id Participant ID performance_mean Mean Value across Longitudinal Data (Simulated) performance_slope Linear Slope across Longitudinal Data (Simulated)","code":""},{"path":"https://shffer.github.io/longpoly/reference/longpoly_example_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Longpoly Example Data — longpoly_example_data","text":"https://github.com/shffer/longpoly?tab=readme-ov-file#-note--simulated-data","code":""},{"path":"https://shffer.github.io/longpoly/reference/plot_polynomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot selected models from final_data tibble output from the longpoly::implement_polynomial() function — plot_polynomial","title":"Plot selected models from final_data tibble output from the longpoly::implement_polynomial() function — plot_polynomial","text":"Plot selected models final_data tibble output longpoly::implement_polynomial() function","code":""},{"path":"https://shffer.github.io/longpoly/reference/plot_polynomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot selected models from final_data tibble output from the longpoly::implement_polynomial() function — plot_polynomial","text":"","code":"plot_polynomial(   data,   performance_metric = \"mean\",   order = 3,   x_label = \"Performance Metric\",   y_label = \"Slope\",   line_width = 1.5,   point_size = 3.5,   whole_cohort_point_color = \"#325a9c\",   whole_cohort_line_color = \"#110036\",   whole_cohort_title = NULL,   whole_cohort_only = TRUE,   train_id = NULL,   test_id = NULL,   train_point_color = \"#430C33\",   train_line_color = \"#7B115B\",   train_title = NULL,   test_point_color = \"#113B19\",   test_line_color = \"#7B115B\",   test_title = NULL,   show_equation = TRUE,   keep_remove = FALSE,   threshold = NULL,   threshold_linetype = \"dashed\",   threshold_line_color = \"#5f6a7a\",   x_offset = 0.25,   y_offset = 0.35,   title_text_size = 14,   axis_text_size = 12,   remove_point_color = \"grey\",   annotate_floor_thresh = FALSE,   legend_position = \"none\",   legend_title = \"Floor Effects\",   legend_title_size = 10,   legend_text_size = 10,   floor_keep_label = \"Keep\",   floor_remove_label = \"Remove\" )"},{"path":"https://shffer.github.io/longpoly/reference/plot_polynomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot selected models from final_data tibble output from the longpoly::implement_polynomial() function — plot_polynomial","text":"data final_data tibble output longpoly::implement_polynomial() performance_metric measure performance used? Must either \"mean\" (case performance_mean column must data) \"baseline\" (data must contain performance_bl). Default = \"mean\" order order polynomial model (recommended selected scree plot output longpoly::test_polynomial()). default = 3 x_label character vector optionally change x axis label. default = \"Mean Performance\" y_label character vector optionally change y axis label. default = \"Slope\" line_width width line reflecting polynomial equation. default = 1.5 point_size size individual data points. default = 3.5 whole_cohort_point_color optionally set color points whole cohort plot whole_cohort_line_color optionally set color line whole cohort plot whole_cohort_title optionally set title whole cohort plot. default = NULL whole_cohort_only whole cohort plot generated? FALSE, plots showing train/test performance long_poly::test_polynomial() selected order returned. default = TRUE train_id vector containing IDs observations allocated training dataset (recommended use train_ids output long_poly::test_polynomial()) test_id vector containing IDs observations allocated test dataset (recommended use test_ids output long_poly::test_polynomial()) train_point_color optionally set color points training data plot train_line_color optionally set color line training data plot train_title optionally set title training data plot. default = NULL test_point_color optionally set color points test data plot test_line_color optionally set color line test data plot test_title optionally set title test data plot. default = NULL show_equation show equation model plots? default = TRUE keep_remove produce additional plot showing IDs removed due floor effects? default = FALSE threshold (required keep_remove = TRUE) threshold used keep remove records due floor_effects (recommended use threshold output long_poly::implement_polynomial()) threshold_linetype ggplot linetype arguments control type line keep_remove = TRUE. set \"blank\" remove line threshold_line_color optionally set color threhold line keep_remove = TRUE x_offset increase decrease x axis plotting region. value subtracted added min max values performance_mean, respectively, specify plotting region relation observed data. default = 0.25 y_offset increase decrease y axis plotting region. value subtracted added min max values performance_slope, respectively, specify plotting region relation observed data. default = 0.35 title_text_size ggplot title text size argument. default = 14 axis_text_size ggplot axis title text size argument. default = 12 remove_point_color optionally set point color removed participants due floor effects keep_remove = TRUE (kept plotted color specified whole_cohort_point_color) annotate_floor_thresh include annotation specifying threshold floor effects keep_remove = TRUE legend_position ggplot legend position argument control placement legend identifying participants kept removed keep_remove = TRUE. default = \"none\" legend_title legend position set keep_remove = TRUE, controls title legend. default = \"Floor Effects\" legend_title_size legend position set keep_remove = TRUE, controls size legend title (ggplot argument). default = 10 legend_text_size legend position set keep_remove = TRUE, controls title legend text (ggplot argument). deafult = 10 floor_keep_label legend position set keep_remove = TRUE, controls label records scores identified floor effects threshold. default = \"Keep\" floor_remove_label legend position set keep_remove = TRUE, controls label records scores identified floor effects threshold. default = \"Remove\"","code":""},{"path":"https://shffer.github.io/longpoly/reference/plot_polynomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot selected models from final_data tibble output from the longpoly::implement_polynomial() function — plot_polynomial","text":"list ggplot objects: whole_cohort — selected polynomial applied records train — (requested) selected polynomial applied train data test — (requested) selected polynomial applied test data. note polynomial developed train data applied test data keep_remove  — (requested) whole_cohort plot additional visualisation removal records due floor effects","code":""},{"path":"https://shffer.github.io/longpoly/reference/plot_polynomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot selected models from final_data tibble output from the longpoly::implement_polynomial() function — plot_polynomial","text":"","code":"# test_polynomial() (or find_polynomial()) occur earlier in the workflow and assign train and test IDs test_results <- test_polynomial(data = longpoly_example_data, test_proportion = 1/3, max_order = 6)   # implement polynomial is typically run before plotting (for identifying threshold) poly_out <- implement_polynomial(   data = longpoly_example_data,   order = 3,   floor_effects = TRUE,   floor_range = c(min(longpoly_example_data$performance_mean), 0) )    plot_polynomial( data = poly_out$final_data, order = 3, whole_cohort_title = \"Selected Polynomial in Whole Cohort\", whole_cohort_only = FALSE, train_id = test_results$train_ids, test_id = test_results$test_ids, train_title = \"Selected Polynomial in Train Cohort\", test_title = \"Selected Polynomial in Test Cohort\", keep_remove = TRUE, threshold = poly_out$threshold, threshold_linetype = \"dashed\", threshold_line_color = \"#5f6a7a\", annotate_floor_thresh = TRUE, legend_position = \"bottom\", ) #> $whole_cohort  #>  #> $train  #>  #> $test  #>  #> $keep_remove  #>"},{"path":"https://shffer.github.io/longpoly/reference/test_polynomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Test models with polynomials of differing orders to describe the relationship between linear rate of change and mean score in longitudinal data — test_polynomial","title":"Test models with polynomials of differing orders to describe the relationship between linear rate of change and mean score in longitudinal data — test_polynomial","text":"Test models polynomials differing orders describe relationship linear rate change mean score longitudinal data","code":""},{"path":"https://shffer.github.io/longpoly/reference/test_polynomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test models with polynomials of differing orders to describe the relationship between linear rate of change and mean score in longitudinal data — test_polynomial","text":"","code":"test_polynomial(   data,   performance_metric = \"mean\",   test_proportion = 1/3,   idcol = \"id\",   max_order = 6 )"},{"path":"https://shffer.github.io/longpoly/reference/test_polynomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test models with polynomials of differing orders to describe the relationship between linear rate of change and mean score in longitudinal data — test_polynomial","text":"data output longpoly::get_slopes_and_mean() (tibble columns \"id\", \"performance_slope\", & \"performance_mean\" \"performance_bl\") performance_metric measure performance used? Must either \"mean\" (case performance_mean column must data) \"baseline\" (data must contain performance_bl). Default = \"mean\" test_proportion proportion participants allocate test set. default = 1/3 idcol column name corresponding ID variable data. Default = \"id\" max_order maximum order polynomial models tested. Polynomial models 1:max_order tested. default = 6","code":""},{"path":"https://shffer.github.io/longpoly/reference/test_polynomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test models with polynomials of differing orders to describe the relationship between linear rate of change and mean score in longitudinal data — test_polynomial","text":"list containing: polynomial_results — tibble columns recording order polynomial tested corresponding proportion variance explained (PVE) test train data, well additional PVE test data increase order train_ids  — character vector ids allocated train dataset model development test_ids  — character vector ids allocated test dataset model development scree_plot  — visualisation additional PVE polynomial. recommended order model selected left ‘elbow’ (improvement plateaus).","code":""},{"path":"https://shffer.github.io/longpoly/reference/test_polynomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test models with polynomials of differing orders to describe the relationship between linear rate of change and mean score in longitudinal data — test_polynomial","text":"","code":"test_results <- test_polynomial(data = longpoly_example_data,                                 idcol = \"id\",                                 performance_metric = \"mean\",                                 test_proportion = 1/3,                                 max_order = 6)  # View proportion of variance explained in the train and test data for each polynomial tested test_results$polynomial_results #> # A tibble: 6 × 4 #>   order pve_in_train_data pve_in_test_data additional_pve #>   <int>             <dbl>            <dbl>          <dbl> #> 1     1            0.0426           0.0380        0.0380  #> 2     2            0.0752           0.0701        0.0321  #> 3     3            0.155            0.144         0.0737  #> 4     4            0.161            0.150         0.00637 #> 5     5            0.209            0.198         0.0479  #> 6     6            0.213            0.207         0.00922  # The IDs of the participants allocated to the train and test sets are stored in the following vectors test_results$train_ids |> head() #> [1] \"1979\" \"1867\" \"1990\" \"930\"  \"1282\" \"256\"  test_results$test_ids |> head() #> [1] \"1\" \"2\" \"3\" \"5\" \"6\" \"7\"  # View the scree plot showing the additional variance explained (test data) for each increase in polynomial order test_results$scree_plot"}]
